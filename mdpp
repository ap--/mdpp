#!/usr/bin/env python
"""One file markdown preprocessor"""
import re
import shlex

__version__ = "0.0.1"


# PPREPROCESSOR
#--------------
class Preprocessor(object):
    """Looks for matching strings and replaces them in the markdown file"""

    def __init__(self, mdfile, commandset=None):
        """mdfile: markdown file handle
        commandset: modify this to include only a subset of commands
        """
        self.data = mdfile.read()
        self.cmds = commandset if commandset is not None else CMDSET

    def iterppitems(self):
        """Iterates over all preprocessor ((start, stop), statement) tuples."""
        for match in re.finditer("<!--@(.*?)@-->", self.data, flags=re.DOTALL):
            yield match.span(), match.group(1)

    def process(self, remove_unkown=False):
        """processes the file and converts commands that it understands"""
        data = self.data
        reversed_output = []
        for (low, high), cmd in sorted(self.iterppitems(), reverse=True):
            ppcmd = shlex.split(cmd)
            cname, cargs = ppcmd[0] if ppcmd else None, ppcmd[1:]
            try:
                substitute = self.cmds[cname](*cargs)
            except KeyError:
                idx = low if not remove_unkown else high
                reversed_output.append(data[idx:])
            else:
                reversed_output.append(data[high:])
                reversed_output.append(substitute)
            data = data[:low]
        reversed_output.append(data)
        return "".join(reversed(reversed_output))


# PARSING FUNCTIONS
#-------------------
def includecode(language, filename):
    """includes a file"""
    with open(filename, 'r') as incf:
        data = incf.read()
    return ("~~~ {.%s}\n%s~~~\n") % (language, data)


def includecodesnippet(language, filename, snippet):
    """includes a part of a file sourrounded by
    # <name>
    ...
    # </name>
    """
    with open(filename, 'r') as incf:
        data = incf.read()
    match = re.search(('"""<%(tag)s>"""(.*?)"""</%(tag)s>"""|'
                       '#\s*<%(tag)s>\s*(.*?)#\s*</%(tag)s>\s*') % {'tag': snippet},
                  data, flags=re.DOTALL)
    try:
        data = match.group(1)
    except:
        data = "\n#snippet %s not found.\n" % snippet
    return ("~~~ {.%s}%s~~~\n") % (language, data)


def optionalfigure(filename, caption):
    """includes a figure with caption"""
    return "![%s](%s)\n" % (caption, filename)


# PARSING DICT
#--------------
CMDS = {'.INCLUDECODE': includecode,
        '.INCLUDECODESNIPPET': includecodesnippet,
        '.OPTIONALFIGURE': optionalfigure,
       }



if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("mdfile", type=argparse.FileType('r'), nargs="?")
    parser.add_argument('--without', type=str,
            help="do not parse these commands; comma seperated string", default='')
    parser.add_argument('--version', action='store_true', help="print version")
    parser.add_argument('--list', action='store_true', help="list implemented commands")
    args = parser.parse_args()

    if args.version:
        print "mdpp-%s" % __version__
    elif args.list:
        print "mdpp: implemented commands\n"
        for cmdname, cmdfunc in CMDS.items():
            print "<!--@ %s %s @-->\n%s\n" % (cmdname,
                " ".join(cmdfunc.func_code.co_varnames[:cmdfunc.func_code.co_argcount]),
                cmdfunc.__doc__)
    elif args.mdfile:
        for remove in args.without.split(','):
            CMDS.pop(remove, None)
        PP = Preprocessor(args.mdfile, commandset=CMDS)
        print PP.process()
    else:
        parser.print_help()
